@import "tools.cocoascript"

var TITLE = "Tile Hero: Uniform Fill"
var CANCEL_BUTTON_TITLE = "Cancel"
var NEXT_BUTTON_TITLE = "Next"
var LABEL_TEXT = "Fill ratio (min:1, max:10)"
var FIELD_TEXT = "5"
var NO_ARTBOARD_SELECTED = "Select at least 1 Artboard"
var MIN_RATIO = 1
var MAX_RATIO = 10
var COMPARE_RATIO = 11
var WINDOW_WIDTH = 350
var WINDOW_HEIGHT = 140
var CANCEL_BUTTON_WIDTH = 80
var CANCEL_BUTTON_HEIGHT = 30
var NEXT_BUTTON_X = 270
var NEXT_BUTTON_WIDTH = 80
var NEXT_BUTTON_HEIGHT = 30
var LABEL_X = 50
var LABEL_Y = 100
var FIELD_X = 260
var FIELD_Y = 100
var FIELD_WIDTH = 25
var FIELD_HEIGHT = 20

var onRun = function(context)
{
    var shouldContinue = false
    var window = createWindow(WINDOW_WIDTH, WINDOW_HEIGHT, TITLE)
    var cancelButton = createButton(0, 0, CANCEL_BUTTON_WIDTH, CANCEL_BUTTON_HEIGHT, CANCEL_BUTTON_TITLE, function(sender)
                                    {
                                        window.orderOut(undefined)
                                        NSApp.stopModal()
                                    })
    
    var nextButton = createButton(NEXT_BUTTON_X, 0, NEXT_BUTTON_WIDTH, NEXT_BUTTON_HEIGHT, NEXT_BUTTON_TITLE, function(sender)
                                    {
                                        shouldContinue = true
                                        window.orderOut(undefined)
                                        NSApp.stopModal()
                                    })
    
    var label = createLabel(LABEL_X, LABEL_Y, LABEL_TEXT)
    var field = createField(FIELD_X, FIELD_Y, FIELD_WIDTH, FIELD_HEIGHT, FIELD_TEXT)
    field.setAlignment(NSTextAlignmentRight)
    
    window.contentViewController().view().addSubview(cancelButton)
    window.contentViewController().view().addSubview(nextButton)
    window.contentViewController().view().addSubview(label)
    window.contentViewController().view().addSubview(field)
    
    NSApp.runModalForWindow(window)
    
    if (shouldContinue)
    {
        var ratio = field.stringValue().intValue()
        
        if (ratio < MIN_RATIO)
        {
            ratio = MIN_RATIO
        }
        else if (ratio > MAX_RATIO)
        {
            ratio = MAX_RATIO
        }
        
        var randomUniformSpaced = new RandomUniformSpaced(context, ratio)
        randomUniformSpaced.makeTile()
    }
};

function RandomUniformSpaced(context, ratio)
{
    this.context = context
    this.sketch = context.api()
    this.ratio = ratio
}

RandomUniformSpaced.prototype.makeTile = function()
{
    var artboards = []
    var layers = this.sketch.selectedDocument.selectedLayers
    
    layers.iterate
    (
        function(item)
        {
            if (item.isArtboard)
            {
                artboards.push(item);
            }
        }
     )
    
    var countArtboards = artboards.length
    
    if (countArtboards < 1)
    {
        this.context.document.showMessage(NO_ARTBOARD_SELECTED)
    }
    else
    {
        for (var indexArtboard = 0; indexArtboard < countArtboards; indexArtboard++)
        {
            var artboard = artboards[indexArtboard]
            
            this.makeTileForArtboard(artboard)
        }
    }
}

RandomUniformSpaced.prototype.makeTileForArtboard = function(artboard)
{
    var artboardFrame = artboard.frame
    var artboardWidth = artboardFrame.width
    var artboardHeight = artboardFrame.height
    var layers = []
    
    artboard.iterate
    (
        function(item)
        {
            layers.push(item)
        }
    )
    
    var countLayers = layers.length
    
    for (var indexLayer = 0; indexLayer < countLayers; indexLayer++)
    {
        var layer = layers[indexLayer]
        
        this.makeFill(layer, artboardWidth, artboardHeight)
    }
}

RandomUniformSpaced.prototype.makeFill = function(layer, artboardWidth, artboardHeight)
{
    var frame = layer.frame
    var width = frame.width
    var height = frame.height
    var maxX = artboardWidth
    var maxY = artboardHeight
    
    for (var posX = 0; posX < maxX;)
    {
        for (var posY = 0; posY < maxY;)
        {
            var draw = this.shouldDraw()
            
            if (draw)
            {
                var newLayer = layer.duplicate()
                var newFrame = newLayer.sketchObject.frame()
                newFrame.setX(posX)
                newFrame.setY(posY)
            }
            
            posY += height
        }
        
        posX += width
    }
    
    layer.remove()
}

RandomUniformSpaced.prototype.shouldDraw = function()
{
    var random = Math.random() * COMPARE_RATIO
    var value = Math.floor(random)
    
    return value < this.ratio
}
