var NO_ARTBOARD_SELECTED = "Select at least 1 Artboard"

function layersFromContext(context)
{
    var tileLayers = []
    var artboards = []
    var layers = context.api().selectedDocument.selectedLayers
    
    layers.iterate
    (
        function(item)
        {
            if (item.isArtboard)
            {
                artboards.push(item)
            }
        }
     )
    
    var countArtboards = artboards.length
    
    if (countArtboards < 1)
    {
        context.document.showMessage(NO_ARTBOARD_SELECTED)
    }
    else
    {
        for (var indexArtboard = 0; indexArtboard < countArtboards; indexArtboard++)
        {
            var artboard = artboards[indexArtboard]
            var artboardTileLayers = layersFromArtboard(artboard)
            tileLayers = tileLayers.concat(artboardTileLayers)
        }
    }
    
    return tileLayers
}

function layersFromArtboard(artboard)
{
    var artboardFrame = artboard.frame
    var width = artboardFrame.width
    var height = artboardFrame.height
    var tileLayers = []
    
    artboard.iterate
    (
        function(item)
        {
            var isLocked = item.sketchObject.isLocked()

            if (!isLocked)
            {
                var tileLayer = new TileLayer(item, width, height)
     
                tileLayers.push(tileLayer)
            }
        }
    )
    
    return tileLayers
}

function createWindow(width, height, title)
{
    var screenSize = NSScreen.screens()[0].frame().size
    var screenWidth = screenSize.width;
    var screenHeight = screenSize.height;
    var windowX = (screenWidth - width) / 2.0
    var windowY = (screenHeight - height) / 2.0
    var windowOrigin = NSMakePoint(windowX, windowY)
    var windowSize = NSMakeSize(width, height)
    var window = NSWindow.new()
    window.setTitle(title)
    window.setFrameOrigin(windowOrigin)
    window.setContentSize(windowSize)
    window.setMinSize(windowSize)
    window.styleMask = NSTitledWindowMask
    
    var controller = [[NSViewController alloc] initWithNibName:"" bundle:nil]
    window.setContentViewController(controller)
    
    return window
}

function createButton(x, y, width, height, title, action)
{
    var buttonSize = NSMakeRect(x, y, width, height)
    var button = NSButton.alloc().initWithFrame(buttonSize)
    button.setBezelStyle(NSRoundedBezelStyle)
    button.setTitle(title)
    button.setCOSJSTargetFunction(action)
    
    return button
}

function createLabel(x, y, text)
{
    var frame = NSMakeRect(0, 0, 0, 0)
    var field = NSTextField.alloc().initWithFrame(frame)
    field.setEditable(false)
    field.setBordered(false)
    field.setDrawsBackground(false)
    field.setStringValue(text)
    field.sizeToFit()
    
    var size = field.frame().size
    frame = NSMakeRect(x, y, size.width, size.height)
    field.setFrame(frame)
    
    return field
}

function createField(x, y, width, height, text)
{
    var frame = NSMakeRect(x, y, width, height)
    var field = NSTextField.alloc().initWithFrame(frame)
    field.setBordered(false)
    field.setStringValue(text)
    
    return field
}

function TileLayer(layer, width, height)
{
    this.layer = layer
    this.width = width
    this.height = height
}
